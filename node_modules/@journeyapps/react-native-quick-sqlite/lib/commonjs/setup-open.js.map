{"version":3,"names":["_types","require","_uuid","_utils","_DBListenerManager","TransactionFinalizer","DEFAULT_READ_CONNECTIONS","LockCallbacks","proxy","closeContextLock","dbName","id","releaseLock","global","onLockContextIsAvailable","lockId","setImmediate","record","timeout","clearTimeout","callback","_contextId","execute","sql","args","result","executeInContext","enhanceQueryResult","ex","console","error","setupOpen","QuickSQLite","open","options","numReadConnections","listenerManager","DBListenerManagerInternal","requestLock","type","hooks","v4","Promise","resolve","reject","context","_hooks$lockAcquired","lockAcquired","call","res","_hooks$lockReleased","lockReleased","timeoutMs","setTimeout","Error","readLock","ConcurrentLockType","READ","writeLock","WRITE","flushUpdates","wrapTransaction","defaultFinalizer","COMMIT","finalized","finalizedStatement","action","commit","rollback","wrapExecute","method","params","ROLLBACK","close","readTransaction","writeTransaction","delete","location","executeBatch","commands","attach","dbNameToAttach","alias","detach","loadFile","registerUpdateHook","registerListener","rawTableChange","registerTablesChangedHook","tablesUpdated"],"sources":["setup-open.ts"],"sourcesContent":["import {\n  ISQLite,\n  ConcurrentLockType,\n  QuickSQLiteConnection,\n  ContextLockID,\n  LockContext,\n  LockOptions,\n  TransactionContext,\n  UpdateCallback,\n  SQLBatchTuple,\n  OpenOptions,\n  QueryResult\n} from './types';\n\nimport { v4 } from 'uuid';\nimport _ from 'lodash';\nimport { enhanceQueryResult } from './utils';\nimport { DBListenerManagerInternal } from './DBListenerManager';\nimport { LockHooks } from './lock-hooks';\n\ntype LockCallbackRecord = {\n  callback: (context: LockContext) => Promise<any>;\n  timeout?: NodeJS.Timeout;\n};\n\nenum TransactionFinalizer {\n  COMMIT = 'commit',\n  ROLLBACK = 'rollback'\n}\n\nconst DEFAULT_READ_CONNECTIONS = 4;\n\nconst LockCallbacks: Record<ContextLockID, LockCallbackRecord> = {};\nlet proxy: ISQLite;\n\n/**\n * Closes the context in JS and C++\n */\nfunction closeContextLock(dbName: string, id: ContextLockID) {\n  delete LockCallbacks[id];\n\n  // This is configured by the setupOpen function\n  proxy.releaseLock(dbName, id);\n}\n\n/**\n * JS callback to trigger queued callbacks when a lock context is available.\n * Declared on the global scope so that C++ can call it.\n * @param lockId\n * @returns\n */\nglobal.onLockContextIsAvailable = async (dbName: string, lockId: ContextLockID) => {\n  // Don't hold C++ bridge side up waiting to complete\n  setImmediate(async () => {\n    try {\n      const record = LockCallbacks[lockId];\n      if (record?.timeout) {\n        clearTimeout(record.timeout);\n      }\n      await record?.callback({\n        // @ts-expect-error This is not part of the public interface, but is used internally\n        _contextId: lockId,\n        execute: async (sql: string, args?: any[]) => {\n          const result = await proxy.executeInContext(dbName, lockId, sql, args);\n          enhanceQueryResult(result);\n          return result;\n        }\n      });\n    } catch (ex) {\n      console.error(ex);\n    }\n  });\n};\n\n/**\n * Generates the entry point for opening concurrent connections\n * @param proxy\n * @returns\n */\nexport function setupOpen(QuickSQLite: ISQLite) {\n  // Allow the Global callbacks to close lock contexts\n  proxy = QuickSQLite;\n\n  return {\n    /**\n     * Opens a SQLite DB connection.\n     * By default opens DB in WAL mode with 4 Read connections and a single\n     * write connection\n     */\n    open: (dbName: string, options: OpenOptions = {}): QuickSQLiteConnection => {\n      // Opens the connection\n      QuickSQLite.open(dbName, {\n        ...options,\n        numReadConnections: options?.numReadConnections ?? DEFAULT_READ_CONNECTIONS\n      });\n\n      const listenerManager = new DBListenerManagerInternal({ dbName });\n\n      /**\n       * Wraps lock requests and their callbacks in order to resolve the lock\n       * request with the callback result once triggered from the connection pool.\n       */\n      const requestLock = <T>(\n        type: ConcurrentLockType,\n        callback: (context: LockContext) => Promise<T>,\n        options?: LockOptions,\n        hooks?: LockHooks\n      ): Promise<T> => {\n        const id = v4(); // TODO maybe do this in C++\n        // Wrap the callback in a promise that will resolve to the callback result\n        return new Promise<T>((resolve, reject) => {\n          // Add callback to the queue for timing\n          const record = (LockCallbacks[id] = {\n            callback: async (context: LockContext) => {\n              try {\n                await hooks?.lockAcquired?.();\n                const res = await callback(context);\n\n                closeContextLock(dbName, id);\n                resolve(res)\n              } catch (ex) {\n                closeContextLock(dbName, id);\n                reject(ex)\n              } finally {\n                hooks?.lockReleased?.()\n              }\n            }\n          } as LockCallbackRecord);\n\n          try {\n            QuickSQLite.requestLock(dbName, id, type);\n            const timeout = options?.timeoutMs;\n            if (timeout) {\n              record.timeout = setTimeout(() => {\n                // The callback won't be executed\n                delete LockCallbacks[id];\n                reject(new Error(`Lock request timed out after ${timeout}ms`));\n              }, timeout);\n            }\n          } catch (ex) {\n            // Remove callback from the queue\n            delete LockCallbacks[id];\n            reject(ex);\n          }\n        });\n      };\n\n      const readLock = <T>(callback: (context: LockContext) => Promise<T>, options?: LockOptions): Promise<T> =>\n        requestLock(ConcurrentLockType.READ, callback, options);\n\n      const writeLock = <T>(callback: (context: LockContext) => Promise<T>, options?: LockOptions): Promise<T> =>\n        requestLock(ConcurrentLockType.WRITE, callback, options, {\n          lockReleased: async () => {\n            // flush updates once a write lock has been released\n            listenerManager.flushUpdates();\n          }\n        });\n\n      const wrapTransaction = async <T>(\n        context: LockContext,\n        callback: (context: TransactionContext) => Promise<T>,\n        defaultFinalizer: TransactionFinalizer = TransactionFinalizer.COMMIT\n      ) => {\n        await context.execute('BEGIN TRANSACTION');\n        let finalized = false;\n\n        const finalizedStatement =\n          <T>(action: () => T): (() => T) =>\n          () => {\n            if (finalized) {\n              return;\n            }\n            finalized = true;\n            return action();\n          };\n\n        const commit = finalizedStatement(async () => context.execute('COMMIT'));\n\n        const rollback = finalizedStatement(async () => context.execute('ROLLBACK'));\n\n        const wrapExecute =\n          <T>(\n            method: (sql: string, params?: any[]) => Promise<QueryResult>\n          ): ((sql: string, params?: any[]) => Promise<QueryResult>) =>\n          async (sql: string, params?: any[]) => {\n            if (finalized) {\n              throw new Error(`Cannot execute in transaction after it has been finalized with commit/rollback.`);\n            }\n            return method(sql, params);\n          };\n\n        try {\n          const res = await callback({\n            ...context,\n            commit,\n            rollback,\n            execute: wrapExecute(context.execute)\n          });\n          switch (defaultFinalizer) {\n            case TransactionFinalizer.COMMIT:\n              await commit();\n              break;\n            case TransactionFinalizer.ROLLBACK:\n              await rollback();\n              break;\n          }\n          return res;\n        } catch (ex) {\n          await rollback();\n          throw ex;\n        }\n      };\n\n      // Return the concurrent connection object\n      return {\n        close: () => QuickSQLite.close(dbName),\n        execute: (sql: string, args?: any[]) => writeLock((context) => context.execute(sql, args)),\n        readLock,\n        readTransaction: async <T>(callback: (context: TransactionContext) => Promise<T>, options?: LockOptions) =>\n          readLock((context) => wrapTransaction(context, callback)),\n        writeLock,\n        writeTransaction: async <T>(callback: (context: TransactionContext) => Promise<T>, options?: LockOptions) =>\n          writeLock((context) => wrapTransaction(context, callback, TransactionFinalizer.COMMIT), options),\n        delete: () => QuickSQLite.delete(dbName, options?.location),\n        executeBatch: (commands: SQLBatchTuple[]) =>\n          writeLock((context) => QuickSQLite.executeBatch(dbName, commands, (context as any)._contextId)),\n        attach: (dbNameToAttach: string, alias: string, location?: string) =>\n          QuickSQLite.attach(dbName, dbNameToAttach, alias, location),\n        detach: (alias: string) => QuickSQLite.detach(dbName, alias),\n        loadFile: (location: string) =>\n          writeLock((context) => QuickSQLite.loadFile(dbName, location, (context as any)._contextId)),\n        listenerManager,\n        registerUpdateHook: (callback: UpdateCallback) =>\n          listenerManager.registerListener({ rawTableChange: callback }),\n        registerTablesChangedHook: (callback) => listenerManager.registerListener({ tablesUpdated: callback })\n      };\n    }\n  };\n}"],"mappings":"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","ignoreList":[]}