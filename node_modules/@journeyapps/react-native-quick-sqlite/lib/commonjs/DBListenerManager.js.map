{"version":3,"names":["_lodash","_interopRequireDefault","require","_tableUpdates","_types","_BaseObserver","obj","__esModule","default","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","String","r","e","Symbol","toPrimitive","call","TypeError","Number","DBListenerManager","BaseObserver","exports","DBListenerManagerInternal","constructor","options","updateBuffer","registerUpdateHook","dbName","update","handleTableUpdates","registerTransactionHook","eventType","TransactionEvent","ROLLBACK","transactionReverted","iterateListeners","l","_l$writeTransaction","writeTransaction","type","flushUpdates","length","groupedUpdates","_","groupBy","table","batchedUpdate","rawUpdates","tables","keys","_l$tablesUpdated","tablesUpdated","notification","_l$rawTableChange","rawTableChange","push"],"sources":["DBListenerManager.ts"],"sourcesContent":["import _ from 'lodash';\nimport { registerTransactionHook, registerUpdateHook } from './table-updates';\nimport {\n  BatchedUpdateCallback,\n  BatchedUpdateNotification,\n  TransactionEvent,\n  UpdateCallback,\n  UpdateNotification\n} from './types';\nimport { BaseListener, BaseObserver } from './utils/BaseObserver';\n\nexport interface DBListenerManagerOptions {\n  dbName: string;\n}\n\nexport interface WriteTransactionEvent {\n  type: TransactionEvent;\n}\n\nexport interface DBListener extends BaseListener {\n  /**\n   * Register a listener to be fired for any table change.\n   * Changes inside write locks and transactions are reported immediately.\n   */\n  rawTableChange: UpdateCallback;\n\n  /**\n   * Register a listener for when table changes are persisted\n   * into the DB. Changes during write transactions which are\n   * rolled back are not reported.\n   * Any changes during write locks are buffered and reported\n   * after transaction commit and lock release.\n   * Table changes are reported individually for now in order to maintain\n   * API compatibility. These can be batched in future.\n   */\n  tablesUpdated: BatchedUpdateCallback;\n\n  /**\n   * Listener event triggered whenever a write transaction\n   * is started, committed or rolled back.\n   */\n  writeTransaction: (event: WriteTransactionEvent) => void;\n}\n\nexport class DBListenerManager extends BaseObserver<DBListener> {}\n\nexport class DBListenerManagerInternal extends DBListenerManager {\n  private updateBuffer: UpdateNotification[];\n\n  constructor(protected options: DBListenerManagerOptions) {\n    super();\n    this.updateBuffer = [];\n    registerUpdateHook(this.options.dbName, (update) => this.handleTableUpdates(update));\n    registerTransactionHook(this.options.dbName, (eventType) => {\n      switch (eventType) {\n        /**\n         * COMMIT hooks occur before the commit is completed. This leads to race conditions.\n         * Only use the rollback event to clear updates.\n         */ \n        case TransactionEvent.ROLLBACK:\n          this.transactionReverted();\n          break;\n      }\n\n      this.iterateListeners((l) =>\n        l.writeTransaction?.({\n          type: eventType\n        })\n      );\n    });\n  }\n\n  flushUpdates() {\n    if (!this.updateBuffer.length) {\n      return;\n    }\n\n    const groupedUpdates = _.groupBy(this.updateBuffer, (update) => update.table);\n    const batchedUpdate: BatchedUpdateNotification = {\n      groupedUpdates,\n      rawUpdates: this.updateBuffer,\n      tables: _.keys(groupedUpdates)\n    };\n    this.updateBuffer = [];\n    this.iterateListeners((l) => l.tablesUpdated?.(batchedUpdate));\n  }\n\n  protected transactionReverted() {\n    // clear updates\n    this.updateBuffer = [];\n  }\n\n  handleTableUpdates(notification: UpdateNotification) {\n    // Fire updates for any change\n    this.iterateListeners((l) => l.rawTableChange?.({ ...notification }));\n\n    // Queue changes until they are flushed\n    this.updateBuffer.push(notification);\n  }\n}\n"],"mappings":"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","ignoreList":[]}