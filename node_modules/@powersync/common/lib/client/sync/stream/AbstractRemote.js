import Logger from 'js-logger';
// Refresh at least 30 sec before it expires
const REFRESH_CREDENTIALS_SAFETY_PERIOD_MS = 30_000;
export const DEFAULT_REMOTE_LOGGER = Logger.get('PowerSyncRemote');
export class AbstractRemote {
    connector;
    logger;
    credentials = null;
    constructor(connector, logger = DEFAULT_REMOTE_LOGGER) {
        this.connector = connector;
        this.logger = logger;
    }
    async getCredentials() {
        const { expiresAt } = this.credentials ?? {};
        if (expiresAt && expiresAt > new Date(new Date().valueOf() + REFRESH_CREDENTIALS_SAFETY_PERIOD_MS)) {
            return this.credentials;
        }
        this.credentials = await this.connector.fetchCredentials();
        return this.credentials;
    }
    async buildRequest(path) {
        const credentials = await this.getCredentials();
        if (credentials != null && (credentials.endpoint == null || credentials.endpoint == '')) {
            throw new Error('PowerSync endpoint not configured');
        }
        else if (credentials?.token == null || credentials?.token == '') {
            const error = new Error(`Not signed in`);
            error.status = 401;
            throw error;
        }
        return {
            url: credentials.endpoint + path,
            headers: {
                'content-type': 'application/json',
                Authorization: `Token ${credentials.token}`
            }
        };
    }
    isAvailable() {
        return true;
    }
}
//# sourceMappingURL=AbstractRemote.js.map