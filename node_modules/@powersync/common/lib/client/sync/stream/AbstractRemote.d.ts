/// <reference types="node" />
import { ILogger } from 'js-logger';
import { PowerSyncCredentials } from '../../connection/PowerSyncCredentials';
export type RemoteConnector = {
    fetchCredentials: () => Promise<PowerSyncCredentials | null>;
};
export declare const DEFAULT_REMOTE_LOGGER: ILogger;
export declare abstract class AbstractRemote {
    protected connector: RemoteConnector;
    protected logger: ILogger;
    protected credentials: PowerSyncCredentials | null;
    constructor(connector: RemoteConnector, logger?: ILogger);
    getCredentials(): Promise<PowerSyncCredentials | null>;
    protected buildRequest(path: string): Promise<{
        url: string;
        headers: {
            'content-type': string;
            Authorization: string;
        };
    }>;
    abstract post(path: string, data: any, headers?: Record<string, string>): Promise<any>;
    abstract get(path: string, headers?: Record<string, string>): Promise<any>;
    abstract postStreaming(path: string, data: any, headers?: Record<string, string>, signal?: AbortSignal): Promise<any>;
    isAvailable(): boolean;
}
